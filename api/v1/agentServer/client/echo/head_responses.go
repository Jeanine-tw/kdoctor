// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 Authors of kdoctor-io
// SPDX-License-Identifier: Apache-2.0

package echo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HeadReader is a Reader for the Head structure.
type HeadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHeadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewHeadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHeadOK creates a HeadOK with default headers values
func NewHeadOK() *HeadOK {
	return &HeadOK{}
}

/*
HeadOK describes a response with status code 200, with default header values.

Success
*/
type HeadOK struct {
}

// IsSuccess returns true when this head o k response has a 2xx status code
func (o *HeadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this head o k response has a 3xx status code
func (o *HeadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head o k response has a 4xx status code
func (o *HeadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this head o k response has a 5xx status code
func (o *HeadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this head o k response a status code equal to that given
func (o *HeadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the head o k response
func (o *HeadOK) Code() int {
	return 200
}

func (o *HeadOK) Error() string {
	return fmt.Sprintf("[HEAD /][%d] headOK ", 200)
}

func (o *HeadOK) String() string {
	return fmt.Sprintf("[HEAD /][%d] headOK ", 200)
}

func (o *HeadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadInternalServerError creates a HeadInternalServerError with default headers values
func NewHeadInternalServerError() *HeadInternalServerError {
	return &HeadInternalServerError{}
}

/*
HeadInternalServerError describes a response with status code 500, with default header values.

Failed
*/
type HeadInternalServerError struct {
}

// IsSuccess returns true when this head internal server error response has a 2xx status code
func (o *HeadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head internal server error response has a 3xx status code
func (o *HeadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head internal server error response has a 4xx status code
func (o *HeadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this head internal server error response has a 5xx status code
func (o *HeadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this head internal server error response a status code equal to that given
func (o *HeadInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the head internal server error response
func (o *HeadInternalServerError) Code() int {
	return 500
}

func (o *HeadInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /][%d] headInternalServerError ", 500)
}

func (o *HeadInternalServerError) String() string {
	return fmt.Sprintf("[HEAD /][%d] headInternalServerError ", 500)
}

func (o *HeadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
